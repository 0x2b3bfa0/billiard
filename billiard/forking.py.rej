***************
*** 69,81 ****
          return partial(func, *args, **keywords)
      ForkingPickler.register(partial, _reduce_partial)
  
  #
  # Unix
  #
  
  if sys.platform != 'win32':
      import select
  
      exit = os._exit
      duplicate = os.dup
      close = os.close
--- 78,97 ----
          return partial(func, *args, **keywords)
      ForkingPickler.register(partial, _reduce_partial)
  
+ def dump(obj, file, protocol=None):
+     ForkingPickler(file, protocol).dump(obj)
+ 
  #
  # Unix
  #
  
  if sys.platform != 'win32':
+     import _thread
      import select
  
+     WINEXE = False
+     WINSERVICE = False
+ 
      exit = os._exit
      duplicate = os.dup
      close = os.close
***************
*** 94,110 ****
              r, w = os.pipe()
              self.sentinel = r
  
-             self.pid = os.fork()
-             if self.pid == 0:
-                 os.close(r)
-                 if 'random' in sys.modules:
-                     import random
-                     random.seed()
-                 code = process_obj._bootstrap()
-                 sys.stdout.flush()
-                 sys.stderr.flush()
-                 os._exit(code)
  
              # `w` will be closed when the child exits, at which point `r`
              # will become ready for reading (using e.g. select()).
              os.close(w)
--- 112,151 ----
              r, w = os.pipe()
              self.sentinel = r
  
+             if _forking_is_enabled:
+                 self.pid = os.fork()
+                 if self.pid == 0:
+                     os.close(r)
+                     if 'random' in sys.modules:
+                         import random
+                         random.seed()
+                     code = process_obj._bootstrap()
+                     sys.stdout.flush()
+                     sys.stderr.flush()
+                     os._exit(code)
  
+             else:
+                 from_parent_fd, to_child_fd = os.pipe()
+                 cmd = get_command_line() + [str(from_parent_fd)]
+ 
+                 self.pid = os.fork()
+                 if self.pid == 0:
+                     os.close(r)
+                     os.close(to_child_fd)
+                     os.execv(sys.executable, cmd)
+ 
+                 # send information to child
+                 prep_data = get_preparation_data(process_obj._name)
+                 os.close(from_parent_fd)
+                 to_child = os.fdopen(to_child_fd, 'wb')
+                 Popen._tls.process_handle = self.pid
+                 try:
+                     dump(prep_data, to_child, HIGHEST_PROTOCOL)
+                     dump(process_obj, to_child, HIGHEST_PROTOCOL)
+                 finally:
+                     del Popen._tls.process_handle
+                     to_child.close()
+                     
              # `w` will be closed when the child exits, at which point `r`
              # will become ready for reading (using e.g. select()).
              os.close(w)
***************
*** 154,165 ****
      import msvcrt
      import _subprocess
  
-     from pickle import load, HIGHEST_PROTOCOL
      from _multiprocessing import win32
  
-     def dump(obj, file, protocol=None):
-         ForkingPickler(file, protocol).dump(obj)
- 
      #
      #
      #
--- 202,209 ----
      import msvcrt
      import _subprocess
  
      from _multiprocessing import win32
  
      #
      #
      #
***************
*** 172,191 ****
      close = win32.CloseHandle
  
      #
-     # _python_exe is the assumed path to the python executable.
-     # People embedding Python want to modify it.
-     #
- 
-     if WINSERVICE:
-         _python_exe = os.path.join(sys.exec_prefix, 'python.exe')
-     else:
-         _python_exe = sys.executable
- 
-     def set_executable(exe):
-         global _python_exe
-         _python_exe = exe
- 
-     #
      #
      #
  
--- 216,221 ----
      close = win32.CloseHandle
  
      #
      #
      #
  
***************
*** 277,402 ****
                      if self.wait(timeout=0.1) is None:
                          raise
  
-     #
-     #
-     #
  
-     def is_forking(argv):
-         '''
-         Return whether commandline indicates we are forking
-         '''
-         if len(argv) >= 2 and argv[1] == '--multiprocessing-fork':
-             assert len(argv) == 3
-             return True
-         else:
-             return False
  
  
-     def freeze_support():
-         '''
-         Run code for process object if this in not the main process
-         '''
-         if is_forking(sys.argv):
-             main()
-             sys.exit()
  
  
-     def get_command_line():
-         '''
-         Returns prefix of command line used for spawning a child process
-         '''
-         if process.current_process()._identity==() and is_forking(sys.argv):
-             raise RuntimeError('''
-             Attempt to start a new process before the current process
-             has finished its bootstrapping phase.
  
-             This probably means that you are on Windows and you have
-             forgotten to use the proper idiom in the main module:
  
-                 if __name__ == '__main__':
-                     freeze_support()
-                     ...
  
-             The "freeze_support()" line can be omitted if the program
-             is not going to be frozen to produce a Windows executable.''')
  
-         if getattr(sys, 'frozen', False):
-             return [sys.executable, '--multiprocessing-fork']
-         else:
-             prog = 'from multiprocessing.forking import main; main()'
-             return [_python_exe, '-c', prog, '--multiprocessing-fork']
  
  
-     def main():
-         '''
-         Run code specifed by data received over pipe
-         '''
-         assert is_forking(sys.argv)
  
-         handle = int(sys.argv[-1])
          fd = msvcrt.open_osfhandle(handle, os.O_RDONLY)
-         from_parent = os.fdopen(fd, 'rb')
  
-         process.current_process()._inheriting = True
-         preparation_data = load(from_parent)
-         prepare(preparation_data)
-         self = load(from_parent)
-         process.current_process()._inheriting = False
  
-         from_parent.close()
  
-         exitcode = self._bootstrap()
-         exit(exitcode)
  
  
-     def get_preparation_data(name):
-         '''
-         Return info about parent needed by child to unpickle process object
-         '''
-         from .util import _logger, _log_to_stderr
  
-         d = dict(
-             name=name,
-             sys_path=sys.path,
-             sys_argv=sys.argv,
-             log_to_stderr=_log_to_stderr,
-             orig_dir=process.ORIGINAL_DIR,
-             authkey=process.current_process().authkey,
-             )
  
-         if _logger is not None:
-             d['log_level'] = _logger.getEffectiveLevel()
  
-         if not WINEXE and not WINSERVICE:
-             main_path = getattr(sys.modules['__main__'], '__file__', None)
-             if not main_path and sys.argv[0] not in ('', '-c'):
-                 main_path = sys.argv[0]
-             if main_path is not None:
-                 if not os.path.isabs(main_path) and \
-                                           process.ORIGINAL_DIR is not None:
-                     main_path = os.path.join(process.ORIGINAL_DIR, main_path)
-                 d['main_path'] = os.path.normpath(main_path)
  
-         return d
- 
-     #
-     # Make (Pipe)Connection picklable
-     #
- 
-     # Late import because of circular import
-     from .connection import Connection, PipeConnection
- 
-     def reduce_connection(conn):
-         if not Popen.thread_is_spawning():
-             raise RuntimeError(
-                 'By default %s objects can only be shared between processes\n'
-                 'using inheritance' % type(conn).__name__
-                 )
-         return type(conn), (Popen.duplicate_for_child(conn.fileno()),
-                             conn.readable, conn.writable)
- 
-     ForkingPickler.register(Connection, reduce_connection)
-     ForkingPickler.register(PipeConnection, reduce_connection)
  
  #
  # Prepare current process
--- 307,433 ----
                      if self.wait(timeout=0.1) is None:
                          raise
  
+ #
+ # _python_exe is the assumed path to the python executable.
+ # People embedding Python want to modify it.
+ #
  
+ if WINSERVICE:
+     _python_exe = os.path.join(sys.exec_prefix, 'python.exe')
+ else:
+     _python_exe = sys.executable
  
+ def set_executable(exe):
+     global _python_exe
+     _python_exe = exe
  
+ #
+ #
+ #
  
+ def is_forking(argv):
+     '''
+     Return whether commandline indicates we are forking
+     '''
+     if len(argv) >= 2 and argv[1] == '--multiprocessing-fork':
+         assert len(argv) == 3
+         return True
+     else:
+         return False
  
  
+ def freeze_support():
+     '''
+     Run code for process object if this in not the main process
+     '''
+     if is_forking(sys.argv):
+         main()
+         sys.exit()
  
  
+ def get_command_line():
+     '''
+     Returns prefix of command line used for spawning a child process
+     '''
+     if process.current_process()._identity==() and is_forking(sys.argv):
+         raise RuntimeError('''
+         Attempt to start a new process before the current process
+         has finished its bootstrapping phase.
  
+         This probably means that you are on Windows and you have
+         forgotten to use the proper idiom in the main module:
  
+             if __name__ == '__main__':
+                 freeze_support()
+                 ...
  
+         The "freeze_support()" line can be omitted if the program
+         is not going to be frozen to produce a Windows executable.''')
  
+     if getattr(sys, 'frozen', False):
+         return [sys.executable, '--multiprocessing-fork']
+     else:
+         prog = 'from multiprocessing.forking import main; main()'
+         return [_python_exe, '-c', prog, '--multiprocessing-fork']
+ 
+ 
+ def main():
+     '''
+     Run code specifed by data received over pipe
+     '''
+     global _forking_is_enabled
+ 
+     assert is_forking(sys.argv)
+     _forking_is_enabled = False
+ 
+     handle = int(sys.argv[-1])
+     if sys.platform == 'win32':
          fd = msvcrt.open_osfhandle(handle, os.O_RDONLY)
+     else:
+         fd = handle
+     from_parent = os.fdopen(fd, 'rb')
  
+     process.current_process()._inheriting = True
+     preparation_data = load(from_parent)
+     prepare(preparation_data)
+     self = load(from_parent)
+     process.current_process()._inheriting = False
  
+     from_parent.close()
  
+     exitcode = self._bootstrap()
+     exit(exitcode)
  
  
+ def get_preparation_data(name):
+     '''
+     Return info about parent needed by child to unpickle process object
+     '''
+     from .util import _logger, _log_to_stderr
  
+     d = dict(
+         name=name,
+         sys_path=sys.path,
+         sys_argv=sys.argv,
+         log_to_stderr=_log_to_stderr,
+         orig_dir=process.ORIGINAL_DIR,
+         authkey=process.current_process().authkey,
+         )
  
+     if _logger is not None:
+         d['log_level'] = _logger.getEffectiveLevel()
  
+     if sys.platform != 'win32' or (not WINEXE and not WINSERVICE):
+         main_path = getattr(sys.modules['__main__'], '__file__', None)
+         if not main_path and sys.argv[0] not in ('', '-c'):
+             main_path = sys.argv[0]
+         if main_path is not None:
+             if not os.path.isabs(main_path) and \
+                                       process.ORIGINAL_DIR is not None:
+                 main_path = os.path.join(process.ORIGINAL_DIR, main_path)
+             d['main_path'] = os.path.normpath(main_path)
  
+     return d
  
  #
  # Prepare current process
